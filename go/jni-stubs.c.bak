static inline jint JNI_AttachCurrentThread(JavaVM *vm, JNIEnv **p_env) { return (*vm)->AttachCurrentThread(vm, (void **) p_env, NULL); }
static inline jint JNI_AttachCurrentThreadAsDaemon(JavaVM *vm, JNIEnv **p_env) { return (*vm)->AttachCurrentThreadAsDaemon(vm, (void **) p_env, NULL); }
static inline jint JNI_GetEnv(JavaVM *vm, JNIEnv **penv, jint version) { return (*vm)->GetEnv(vm, (void **) penv, version); }
static inline jint JNI_GetJavaVM(JNIEnv * env, JavaVM **vm) { return (*env)->GetJavaVM(env, vm); }
static inline int JNI_GetObjectRefType(JNIEnv * env, jobject obj) { return (int) (*env)->GetObjectRefType(env, obj); }
static inline jint JNI_DestroyJavaVM(JavaVM * vm) { return (*vm)->DestroyJavaVM(vm); }
static inline jint JNI_DetachCurrentThread(JavaVM * vm) { return (*vm)->DetachCurrentThread(vm); }
static inline jclass JNI_FindClass(JNIEnv * env, char * name) { return (*env)->FindClass(env, name); }
static inline jint JNI_GetVersion(JNIEnv * env) { return (*env)->GetVersion(env); }
static inline jmethodID JNI_FromReflectedMethod(JNIEnv * env, jobject method) { return (*env)->FromReflectedMethod(env, method); }
static inline jfieldID JNI_FromReflectedField(JNIEnv * env, jobject field) { return (*env)->FromReflectedField(env, field); }
static inline jobject JNI_ToReflectedMethod(JNIEnv * env, jclass cls, jmethodID methodID, jboolean isStatic) { return (*env)->ToReflectedMethod(env, cls, methodID, isStatic); }
static inline jclass JNI_GetSuperclass(JNIEnv * env, jclass sub) { return (*env)->GetSuperclass(env, sub); }
static inline jboolean JNI_IsAssignableFrom(JNIEnv * env, jclass sub, jclass sup) { return (*env)->IsAssignableFrom(env, sub, sup); }
static inline jobject JNI_ToReflectedField(JNIEnv * env, jclass cls, jfieldID fieldID, jboolean isStatic) { return (*env)->ToReflectedField(env, cls, fieldID, isStatic); }
static inline jint JNI_Throw(JNIEnv * env, jthrowable obj) { return (*env)->Throw(env, obj); }
static inline jint JNI_ThrowNew(JNIEnv * env, jclass clazz, char * msg) { return (*env)->ThrowNew(env, clazz, msg); }
static inline jthrowable JNI_ExceptionOccurred(JNIEnv * env) { return (*env)->ExceptionOccurred(env); }
static inline void JNI_ExceptionDescribe(JNIEnv * env) { (*env)->ExceptionDescribe(env); }
static inline void JNI_ExceptionClear(JNIEnv * env) { (*env)->ExceptionClear(env); }
static inline void JNI_FatalError(JNIEnv * env, char * msg) { (*env)->FatalError(env, msg); }
static inline jint JNI_PushLocalFrame(JNIEnv * env, jint capacity) { return (*env)->PushLocalFrame(env, capacity); }
static inline jobject JNI_PopLocalFrame(JNIEnv * env, jobject result) { return (*env)->PopLocalFrame(env, result); }
static inline jobject JNI_NewGlobalRef(JNIEnv * env, jobject lobj) { return (*env)->NewGlobalRef(env, lobj); }
static inline void JNI_DeleteGlobalRef(JNIEnv * env, jobject gref) { (*env)->DeleteGlobalRef(env, gref); }
static inline void JNI_DeleteLocalRef(JNIEnv * env, jobject obj) { (*env)->DeleteLocalRef(env, obj); }
static inline jboolean JNI_IsSameObject(JNIEnv * env, jobject obj1, jobject obj2) { return (*env)->IsSameObject(env, obj1, obj2); }
static inline jobject JNI_NewLocalRef(JNIEnv * env, jobject ref) { return (*env)->NewLocalRef(env, ref); }
static inline jint JNI_EnsureLocalCapacity(JNIEnv * env, jint capacity) { return (*env)->EnsureLocalCapacity(env, capacity); }
static inline jobject JNI_AllocObject(JNIEnv * env, jclass clazz) { return (*env)->AllocObject(env, clazz); }
static inline jobject JNI_NewObjectA(JNIEnv * env, jclass clazz, jmethodID methodID, jvalue * args) { return (*env)->NewObjectA(env, clazz, methodID, args); }
static inline jclass JNI_GetObjectClass(JNIEnv * env, jobject obj) { return (*env)->GetObjectClass(env, obj); }
static inline jboolean JNI_IsInstanceOf(JNIEnv * env, jobject obj, jclass clazz) { return (*env)->IsInstanceOf(env, obj, clazz); }
static inline jmethodID JNI_GetMethodID(JNIEnv * env, jclass clazz, char * name, char * sig) { return (*env)->GetMethodID(env, clazz, name, sig); }
static inline jobject JNI_CallObjectMethodA(JNIEnv * env, jobject obj, jmethodID methodID, jvalue * args) { return (*env)->CallObjectMethodA(env, obj, methodID, args); }
static inline jboolean JNI_CallBooleanMethodA(JNIEnv * env, jobject obj, jmethodID methodID, jvalue * args) { return (*env)->CallBooleanMethodA(env, obj, methodID, args); }
static inline jbyte JNI_CallByteMethodA(JNIEnv * env, jobject obj, jmethodID methodID, jvalue * args) { return (*env)->CallByteMethodA(env, obj, methodID, args); }
static inline jchar JNI_CallCharMethodA(JNIEnv * env, jobject obj, jmethodID methodID, jvalue * args) { return (*env)->CallCharMethodA(env, obj, methodID, args); }
static inline jshort JNI_CallShortMethodA(JNIEnv * env, jobject obj, jmethodID methodID, jvalue * args) { return (*env)->CallShortMethodA(env, obj, methodID, args); }
static inline jint JNI_CallIntMethodA(JNIEnv * env, jobject obj, jmethodID methodID, jvalue * args) { return (*env)->CallIntMethodA(env, obj, methodID, args); }
static inline jlong JNI_CallLongMethodA(JNIEnv * env, jobject obj, jmethodID methodID, jvalue * args) { return (*env)->CallLongMethodA(env, obj, methodID, args); }
static inline jfloat JNI_CallFloatMethodA(JNIEnv * env, jobject obj, jmethodID methodID, jvalue * args) { return (*env)->CallFloatMethodA(env, obj, methodID, args); }
static inline jdouble JNI_CallDoubleMethodA(JNIEnv * env, jobject obj, jmethodID methodID, jvalue * args) { return (*env)->CallDoubleMethodA(env, obj, methodID, args); }
static inline void JNI_CallVoidMethodA(JNIEnv * env, jobject obj, jmethodID methodID, jvalue * args) { (*env)->CallVoidMethodA(env, obj, methodID, args); }
static inline jobject JNI_CallNonvirtualObjectMethodA(JNIEnv * env, jobject obj, jclass clazz, jmethodID methodID, jvalue * args) { return (*env)->CallNonvirtualObjectMethodA(env, obj, clazz, methodID, args); }
static inline jboolean JNI_CallNonvirtualBooleanMethodA(JNIEnv * env, jobject obj, jclass clazz, jmethodID methodID, jvalue * args) { return (*env)->CallNonvirtualBooleanMethodA(env, obj, clazz, methodID, args); }
static inline jbyte JNI_CallNonvirtualByteMethodA(JNIEnv * env, jobject obj, jclass clazz, jmethodID methodID, jvalue * args) { return (*env)->CallNonvirtualByteMethodA(env, obj, clazz, methodID, args); }
static inline jchar JNI_CallNonvirtualCharMethodA(JNIEnv * env, jobject obj, jclass clazz, jmethodID methodID, jvalue * args) { return (*env)->CallNonvirtualCharMethodA(env, obj, clazz, methodID, args); }
static inline jshort JNI_CallNonvirtualShortMethodA(JNIEnv * env, jobject obj, jclass clazz, jmethodID methodID, jvalue * args) { return (*env)->CallNonvirtualShortMethodA(env, obj, clazz, methodID, args); }
static inline jint JNI_CallNonvirtualIntMethodA(JNIEnv * env, jobject obj, jclass clazz, jmethodID methodID, jvalue * args) { return (*env)->CallNonvirtualIntMethodA(env, obj, clazz, methodID, args); }
static inline jlong JNI_CallNonvirtualLongMethodA(JNIEnv * env, jobject obj, jclass clazz, jmethodID methodID, jvalue * args) { return (*env)->CallNonvirtualLongMethodA(env, obj, clazz, methodID, args); }
static inline jfloat JNI_CallNonvirtualFloatMethodA(JNIEnv * env, jobject obj, jclass clazz, jmethodID methodID, jvalue * args) { return (*env)->CallNonvirtualFloatMethodA(env, obj, clazz, methodID, args); }
static inline jdouble JNI_CallNonvirtualDoubleMethodA(JNIEnv * env, jobject obj, jclass clazz, jmethodID methodID, jvalue * args) { return (*env)->CallNonvirtualDoubleMethodA(env, obj, clazz, methodID, args); }
static inline void JNI_CallNonvirtualVoidMethodA(JNIEnv * env, jobject obj, jclass clazz, jmethodID methodID, jvalue * args) { (*env)->CallNonvirtualVoidMethodA(env, obj, clazz, methodID, args); }
static inline jfieldID JNI_GetFieldID(JNIEnv * env, jclass clazz, char * name, char * sig) { return (*env)->GetFieldID(env, clazz, name, sig); }
static inline jobject JNI_GetObjectField(JNIEnv * env, jobject obj, jfieldID fieldID) { return (*env)->GetObjectField(env, obj, fieldID); }
static inline jboolean JNI_GetBooleanField(JNIEnv * env, jobject obj, jfieldID fieldID) { return (*env)->GetBooleanField(env, obj, fieldID); }
static inline jbyte JNI_GetByteField(JNIEnv * env, jobject obj, jfieldID fieldID) { return (*env)->GetByteField(env, obj, fieldID); }
static inline jchar JNI_GetCharField(JNIEnv * env, jobject obj, jfieldID fieldID) { return (*env)->GetCharField(env, obj, fieldID); }
static inline jshort JNI_GetShortField(JNIEnv * env, jobject obj, jfieldID fieldID) { return (*env)->GetShortField(env, obj, fieldID); }
static inline jint JNI_GetIntField(JNIEnv * env, jobject obj, jfieldID fieldID) { return (*env)->GetIntField(env, obj, fieldID); }
static inline jlong JNI_GetLongField(JNIEnv * env, jobject obj, jfieldID fieldID) { return (*env)->GetLongField(env, obj, fieldID); }
static inline jfloat JNI_GetFloatField(JNIEnv * env, jobject obj, jfieldID fieldID) { return (*env)->GetFloatField(env, obj, fieldID); }
static inline jdouble JNI_GetDoubleField(JNIEnv * env, jobject obj, jfieldID fieldID) { return (*env)->GetDoubleField(env, obj, fieldID); }
static inline void JNI_SetObjectField(JNIEnv * env, jobject obj, jfieldID fieldID, jobject val) { (*env)->SetObjectField(env, obj, fieldID, val); }
static inline void JNI_SetBooleanField(JNIEnv * env, jobject obj, jfieldID fieldID, jboolean val) { (*env)->SetBooleanField(env, obj, fieldID, val); }
static inline void JNI_SetByteField(JNIEnv * env, jobject obj, jfieldID fieldID, jbyte val) { (*env)->SetByteField(env, obj, fieldID, val); }
static inline void JNI_SetCharField(JNIEnv * env, jobject obj, jfieldID fieldID, jchar val) { (*env)->SetCharField(env, obj, fieldID, val); }
static inline void JNI_SetShortField(JNIEnv * env, jobject obj, jfieldID fieldID, jshort val) { (*env)->SetShortField(env, obj, fieldID, val); }
static inline void JNI_SetIntField(JNIEnv * env, jobject obj, jfieldID fieldID, jint val) { (*env)->SetIntField(env, obj, fieldID, val); }
static inline void JNI_SetLongField(JNIEnv * env, jobject obj, jfieldID fieldID, jlong val) { (*env)->SetLongField(env, obj, fieldID, val); }
static inline void JNI_SetFloatField(JNIEnv * env, jobject obj, jfieldID fieldID, jfloat val) { (*env)->SetFloatField(env, obj, fieldID, val); }
static inline void JNI_SetDoubleField(JNIEnv * env, jobject obj, jfieldID fieldID, jdouble val) { (*env)->SetDoubleField(env, obj, fieldID, val); }
static inline jmethodID JNI_GetStaticMethodID(JNIEnv * env, jclass clazz, char * name, char * sig) { return (*env)->GetStaticMethodID(env, clazz, name, sig); }
static inline jobject JNI_CallStaticObjectMethodA(JNIEnv * env, jclass clazz, jmethodID methodID, jvalue * args) { return (*env)->CallStaticObjectMethodA(env, clazz, methodID, args); }
static inline jboolean JNI_CallStaticBooleanMethodA(JNIEnv * env, jclass clazz, jmethodID methodID, jvalue * args) { return (*env)->CallStaticBooleanMethodA(env, clazz, methodID, args); }
static inline jbyte JNI_CallStaticByteMethodA(JNIEnv * env, jclass clazz, jmethodID methodID, jvalue * args) { return (*env)->CallStaticByteMethodA(env, clazz, methodID, args); }
static inline jchar JNI_CallStaticCharMethodA(JNIEnv * env, jclass clazz, jmethodID methodID, jvalue * args) { return (*env)->CallStaticCharMethodA(env, clazz, methodID, args); }
static inline jshort JNI_CallStaticShortMethodA(JNIEnv * env, jclass clazz, jmethodID methodID, jvalue * args) { return (*env)->CallStaticShortMethodA(env, clazz, methodID, args); }
static inline jint JNI_CallStaticIntMethodA(JNIEnv * env, jclass clazz, jmethodID methodID, jvalue * args) { return (*env)->CallStaticIntMethodA(env, clazz, methodID, args); }
static inline jlong JNI_CallStaticLongMethodA(JNIEnv * env, jclass clazz, jmethodID methodID, jvalue * args) { return (*env)->CallStaticLongMethodA(env, clazz, methodID, args); }
static inline jfloat JNI_CallStaticFloatMethodA(JNIEnv * env, jclass clazz, jmethodID methodID, jvalue * args) { return (*env)->CallStaticFloatMethodA(env, clazz, methodID, args); }
static inline jdouble JNI_CallStaticDoubleMethodA(JNIEnv * env, jclass clazz, jmethodID methodID, jvalue * args) { return (*env)->CallStaticDoubleMethodA(env, clazz, methodID, args); }
static inline void JNI_CallStaticVoidMethodA(JNIEnv * env, jclass cls, jmethodID methodID, jvalue * args) { (*env)->CallStaticVoidMethodA(env, cls, methodID, args); }
static inline jfieldID JNI_GetStaticFieldID(JNIEnv * env, jclass clazz, char * name, char * sig) { return (*env)->GetStaticFieldID(env, clazz, name, sig); }
static inline jobject JNI_GetStaticObjectField(JNIEnv * env, jclass clazz, jfieldID fieldID) { return (*env)->GetStaticObjectField(env, clazz, fieldID); }
static inline jboolean JNI_GetStaticBooleanField(JNIEnv * env, jclass clazz, jfieldID fieldID) { return (*env)->GetStaticBooleanField(env, clazz, fieldID); }
static inline jbyte JNI_GetStaticByteField(JNIEnv * env, jclass clazz, jfieldID fieldID) { return (*env)->GetStaticByteField(env, clazz, fieldID); }
static inline jchar JNI_GetStaticCharField(JNIEnv * env, jclass clazz, jfieldID fieldID) { return (*env)->GetStaticCharField(env, clazz, fieldID); }
static inline jshort JNI_GetStaticShortField(JNIEnv * env, jclass clazz, jfieldID fieldID) { return (*env)->GetStaticShortField(env, clazz, fieldID); }
static inline jint JNI_GetStaticIntField(JNIEnv * env, jclass clazz, jfieldID fieldID) { return (*env)->GetStaticIntField(env, clazz, fieldID); }
static inline jlong JNI_GetStaticLongField(JNIEnv * env, jclass clazz, jfieldID fieldID) { return (*env)->GetStaticLongField(env, clazz, fieldID); }
static inline jfloat JNI_GetStaticFloatField(JNIEnv * env, jclass clazz, jfieldID fieldID) { return (*env)->GetStaticFloatField(env, clazz, fieldID); }
static inline jdouble JNI_GetStaticDoubleField(JNIEnv * env, jclass clazz, jfieldID fieldID) { return (*env)->GetStaticDoubleField(env, clazz, fieldID); }
static inline void JNI_SetStaticObjectField(JNIEnv * env, jclass clazz, jfieldID fieldID, jobject value) { (*env)->SetStaticObjectField(env, clazz, fieldID, value); }
static inline void JNI_SetStaticBooleanField(JNIEnv * env, jclass clazz, jfieldID fieldID, jboolean value) { (*env)->SetStaticBooleanField(env, clazz, fieldID, value); }
static inline void JNI_SetStaticByteField(JNIEnv * env, jclass clazz, jfieldID fieldID, jbyte value) { (*env)->SetStaticByteField(env, clazz, fieldID, value); }
static inline void JNI_SetStaticCharField(JNIEnv * env, jclass clazz, jfieldID fieldID, jchar value) { (*env)->SetStaticCharField(env, clazz, fieldID, value); }
static inline void JNI_SetStaticShortField(JNIEnv * env, jclass clazz, jfieldID fieldID, jshort value) { (*env)->SetStaticShortField(env, clazz, fieldID, value); }
static inline void JNI_SetStaticIntField(JNIEnv * env, jclass clazz, jfieldID fieldID, jint value) { (*env)->SetStaticIntField(env, clazz, fieldID, value); }
static inline void JNI_SetStaticLongField(JNIEnv * env, jclass clazz, jfieldID fieldID, jlong value) { (*env)->SetStaticLongField(env, clazz, fieldID, value); }
static inline void JNI_SetStaticFloatField(JNIEnv * env, jclass clazz, jfieldID fieldID, jfloat value) { (*env)->SetStaticFloatField(env, clazz, fieldID, value); }
static inline void JNI_SetStaticDoubleField(JNIEnv * env, jclass clazz, jfieldID fieldID, jdouble value) { (*env)->SetStaticDoubleField(env, clazz, fieldID, value); }
static inline jstring JNI_NewString(JNIEnv * env, jchar * unicode, jsize len) { return (*env)->NewString(env, unicode, len); }
static inline jstring JNI_NewStringUTF(JNIEnv * env, const char *utf) { return (*env)->NewStringUTF(env, utf); }
static inline jsize JNI_GetStringLength(JNIEnv * env, jstring str) { return (*env)->GetStringLength(env, str); }
static inline jsize JNI_GetStringUTFLength(JNIEnv * env, jstring str) { return (*env)->GetStringUTFLength(env, str); }
static inline jsize JNI_GetArrayLength(JNIEnv * env, jarray array) { return (*env)->GetArrayLength(env, array); }
static inline jobjectArray JNI_NewObjectArray(JNIEnv * env, jsize len, jclass clazz, jobject init) { return (*env)->NewObjectArray(env, len, clazz, init); }
static inline jobject JNI_GetObjectArrayElement(JNIEnv * env, jobjectArray array, jsize index) { return (*env)->GetObjectArrayElement(env, array, index); }
static inline void JNI_SetObjectArrayElement(JNIEnv * env, jobjectArray array, jsize index, jobject val) { (*env)->SetObjectArrayElement(env, array, index, val); }
static inline jbooleanArray JNI_NewBooleanArray(JNIEnv * env, jsize len) { return (*env)->NewBooleanArray(env, len); }
static inline jbyteArray JNI_NewByteArray(JNIEnv * env, jsize len) { return (*env)->NewByteArray(env, len); }
static inline jcharArray JNI_NewCharArray(JNIEnv * env, jsize len) { return (*env)->NewCharArray(env, len); }
static inline jshortArray JNI_NewShortArray(JNIEnv * env, jsize len) { return (*env)->NewShortArray(env, len); }
static inline jintArray JNI_NewIntArray(JNIEnv * env, jsize len) { return (*env)->NewIntArray(env, len); }
static inline jlongArray JNI_NewLongArray(JNIEnv * env, jsize len) { return (*env)->NewLongArray(env, len); }
static inline jfloatArray JNI_NewFloatArray(JNIEnv * env, jsize len) { return (*env)->NewFloatArray(env, len); }
static inline jdoubleArray JNI_NewDoubleArray(JNIEnv * env, jsize len) { return (*env)->NewDoubleArray(env, len); }
static inline void JNI_GetBooleanArrayRegion(JNIEnv * env, jbooleanArray array, jsize start, jsize l, jboolean * buf) { (*env)->GetBooleanArrayRegion(env, array, start, l, buf); }
static inline void JNI_GetByteArrayRegion(JNIEnv * env, jbyteArray array, jsize start, jsize len, jbyte * buf) { (*env)->GetByteArrayRegion(env, array, start, len, buf); }
static inline void JNI_GetCharArrayRegion(JNIEnv * env, jcharArray array, jsize start, jsize len, jchar * buf) { (*env)->GetCharArrayRegion(env, array, start, len, buf); }
static inline void JNI_GetShortArrayRegion(JNIEnv * env, jshortArray array, jsize start, jsize len, jshort * buf) { (*env)->GetShortArrayRegion(env, array, start, len, buf); }
static inline void JNI_GetIntArrayRegion(JNIEnv * env, jintArray array, jsize start, jsize len, jint * buf) { (*env)->GetIntArrayRegion(env, array, start, len, buf); }
static inline void JNI_GetLongArrayRegion(JNIEnv * env, jlongArray array, jsize start, jsize len, jlong * buf) { (*env)->GetLongArrayRegion(env, array, start, len, buf); }
static inline void JNI_GetFloatArrayRegion(JNIEnv * env, jfloatArray array, jsize start, jsize len, jfloat * buf) { (*env)->GetFloatArrayRegion(env, array, start, len, buf); }
static inline void JNI_GetDoubleArrayRegion(JNIEnv * env, jdoubleArray array, jsize start, jsize len, jdouble * buf) { (*env)->GetDoubleArrayRegion(env, array, start, len, buf); }
static inline void JNI_SetBooleanArrayRegion(JNIEnv * env, jbooleanArray array, jsize start, jsize l, jboolean * buf) { (*env)->SetBooleanArrayRegion(env, array, start, l, buf); }
static inline void JNI_SetByteArrayRegion(JNIEnv * env, jbyteArray array, jsize start, jsize len, jbyte * buf) { (*env)->SetByteArrayRegion(env, array, start, len, buf); }
static inline void JNI_SetCharArrayRegion(JNIEnv * env, jcharArray array, jsize start, jsize len, jchar * buf) { (*env)->SetCharArrayRegion(env, array, start, len, buf); }
static inline void JNI_SetShortArrayRegion(JNIEnv * env, jshortArray array, jsize start, jsize len, jshort * buf) { (*env)->SetShortArrayRegion(env, array, start, len, buf); }
static inline void JNI_SetIntArrayRegion(JNIEnv * env, jintArray array, jsize start, jsize len, jint * buf) { (*env)->SetIntArrayRegion(env, array, start, len, buf); }
static inline void JNI_SetLongArrayRegion(JNIEnv * env, jlongArray array, jsize start, jsize len, jlong * buf) { (*env)->SetLongArrayRegion(env, array, start, len, buf); }
static inline void JNI_SetFloatArrayRegion(JNIEnv * env, jfloatArray array, jsize start, jsize len, jfloat * buf) { (*env)->SetFloatArrayRegion(env, array, start, len, buf); }
static inline void JNI_SetDoubleArrayRegion(JNIEnv * env, jdoubleArray array, jsize start, jsize len, jdouble * buf) { (*env)->SetDoubleArrayRegion(env, array, start, len, buf); }
static inline jint JNI_MonitorEnter(JNIEnv * env, jobject obj) { return (*env)->MonitorEnter(env, obj); }
static inline jint JNI_MonitorExit(JNIEnv * env, jobject obj) { return (*env)->MonitorExit(env, obj); }
static inline void JNI_GetStringUTFRegion(JNIEnv * env, jstring str, jsize start, jsize len, char * buf) { (*env)->GetStringUTFRegion(env, str, start, len, buf); }
static inline const char * JNI_GetStringUTFChars(JNIEnv * env, jstring str, jboolean * isCopy) { return (*env)->GetStringUTFChars(env, str, isCopy); }
static inline void JNI_ReleaseStringUTFChars(JNIEnv * env, jstring str, const char * chars) { (*env)->ReleaseStringUTFChars(env, str, chars); }
static inline void * JNI_GetPrimitiveArrayCritical(JNIEnv * env, jarray array) { return (*env)->GetPrimitiveArrayCritical(env, array, NULL); }
static inline void JNI_ReleasePrimitiveArrayCritical(JNIEnv * env, jarray array, void * carray, jint mode) { (*env)->ReleasePrimitiveArrayCritical(env, array, carray, mode); }
static inline jweak JNI_NewWeakGlobalRef(JNIEnv * env, jobject obj) { return (*env)->NewWeakGlobalRef(env, obj); }
static inline void JNI_DeleteWeakGlobalRef(JNIEnv * env, jweak ref) { (*env)->DeleteWeakGlobalRef(env, ref); }
static inline jboolean JNI_ExceptionCheck(JNIEnv * env) { return (*env)->ExceptionCheck(env); }
static inline jobject JNI_NewDirectByteBuffer(JNIEnv * env, void * address, jlong capacity) { return (*env)->NewDirectByteBuffer(env, address, capacity); }
static inline void * JNI_GetDirectBufferAddress(JNIEnv * env, jobject buf) { return (*env)->GetDirectBufferAddress(env, buf); }
static inline jlong JNI_GetDirectBufferCapacity(JNIEnv * env, jobject buf) { return (*env)->GetDirectBufferCapacity(env, buf); }
static inline jobject JNI_GetModule(JNIEnv * env, jclass clazz) { return (*env)->GetModule(env, clazz); }
